{"ast":null,"code":"var _jsxFileName = \"/home/hubertyu/Code/reactExpressDemo/src/loginRegister/forgotPassword/App.js\";\nimport React, { useState } from 'react';\nimport { Button, Form, Container, Row, Col } from 'react-bootstrap';\n\nconst App = () => {\n  const [ResetEmail, setResetEmail] = useState({\n    email: ''\n  });\n  const [errors, setErrors] = useState({});\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    event.stopPropagation();\n    var errors = validator(ResetEmail);\n    setErrors(errors);\n\n    if (Object.keys(errors).length === 0) {\n      fetch(loginUrl, {\n        method: 'POST',\n        // or 'PUT'\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(formContext.LoginFormInfo)\n      }).then(response => response.json()).then(data => {\n        console.log(data);\n\n        if (data.status === 'failed') {\n          setErrors({\n            info: data.info\n          });\n        }\n\n        if (data.status === 'success') {\n          setCookie('token', data.token);\n          setCookie('username', data.username);\n          setCookie('email', data.email);\n          setShow(false);\n          formContext.dispatch({\n            type: 'login',\n            payload: data\n          });\n        }\n      }).catch(error => {\n        console.error('Error:', error);\n      });\n    }\n  };\n\n  const validator = userInfo => {\n    let errors = {};\n\n    if (userInfo.email !== undefined) {\n      if (userInfo.email.length === 0) {\n        errors.email = 'Email Address Is Required';\n      }\n    }\n\n    return errors;\n  };\n\n  return /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    xs: 2,\n    md: 4,\n    lg: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(Col, {\n    lg: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Form, {\n    noValidate: true,\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(Form.Group, {\n    controlId: \"formBasicEmail\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(Form.Label, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 41\n    }\n  }, \"Email address\"), /*#__PURE__*/React.createElement(Form.Control, {\n    type: \"email\",\n    name: \"email\",\n    placeholder: \"Enter email\",\n    onChange: event => {\n      setResetEmail({ ...ResetEmail,\n        [event.currentTarget.name]: event.currentTarget.value\n      });\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 41\n    }\n  }), errors.email && /*#__PURE__*/React.createElement(Form.Text, {\n    style: {\n      color: 'red'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 49\n    }\n  }, errors.email)), /*#__PURE__*/React.createElement(Button, {\n    variant: \"primary\",\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 33\n    }\n  }, \"Submit\"))), /*#__PURE__*/React.createElement(Col, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 25\n    }\n  })));\n};\n\nexport default App;","map":{"version":3,"sources":["/home/hubertyu/Code/reactExpressDemo/src/loginRegister/forgotPassword/App.js"],"names":["React","useState","Button","Form","Container","Row","Col","App","ResetEmail","setResetEmail","email","errors","setErrors","handleSubmit","event","preventDefault","stopPropagation","validator","Object","keys","length","fetch","loginUrl","method","headers","body","JSON","stringify","formContext","LoginFormInfo","then","response","json","data","console","log","status","info","setCookie","token","username","setShow","dispatch","type","payload","catch","error","userInfo","undefined","currentTarget","name","value","color"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,SAASC,MAAT,EAAgBC,IAAhB,EAAqBC,SAArB,EAA+BC,GAA/B,EAAmCC,GAAnC,QAA8C,iBAA9C;;AACA,MAAMC,GAAG,GAAG,MAAI;AACR,QAAM,CAACC,UAAD,EAAYC,aAAZ,IAA6BR,QAAQ,CAAC;AACpCS,IAAAA,KAAK,EAAC;AAD8B,GAAD,CAA3C;AAGA,QAAM,CAACC,MAAD,EAAQC,SAAR,IAAqBX,QAAQ,CAAC,EAAD,CAAnC;;AAEA,QAAMY,YAAY,GAAIC,KAAD,IAAW;AACxBA,IAAAA,KAAK,CAACC,cAAN;AACAD,IAAAA,KAAK,CAACE,eAAN;AACA,QAAIL,MAAM,GAAGM,SAAS,CAACT,UAAD,CAAtB;AACAI,IAAAA,SAAS,CAACD,MAAD,CAAT;;AACA,QAAGO,MAAM,CAACC,IAAP,CAAYR,MAAZ,EAAoBS,MAApB,KAA+B,CAAlC,EAAqC;AAC7BC,MAAAA,KAAK,CAACC,QAAD,EAAW;AACRC,QAAAA,MAAM,EAAE,MADA;AACQ;AAChBC,QAAAA,OAAO,EAAE;AACL,0BAAgB;AADX,SAFD;AAKRC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeC,WAAW,CAACC,aAA3B;AALE,OAAX,CAAL,CAOOC,IAPP,CAOYC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EAPxB,EAQOF,IARP,CAQYG,IAAI,IAAI;AACZC,QAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;;AACA,YAAGA,IAAI,CAACG,MAAL,KAAc,QAAjB,EAA0B;AACxBxB,UAAAA,SAAS,CAAC;AACRyB,YAAAA,IAAI,EAACJ,IAAI,CAACI;AADF,WAAD,CAAT;AAGD;;AACC,YAAGJ,IAAI,CAACG,MAAL,KAAc,SAAjB,EAA2B;AACvBE,UAAAA,SAAS,CAAC,OAAD,EAASL,IAAI,CAACM,KAAd,CAAT;AACAD,UAAAA,SAAS,CAAC,UAAD,EAAYL,IAAI,CAACO,QAAjB,CAAT;AACAF,UAAAA,SAAS,CAAC,OAAD,EAASL,IAAI,CAACvB,KAAd,CAAT;AACA+B,UAAAA,OAAO,CAAC,KAAD,CAAP;AACAb,UAAAA,WAAW,CAACc,QAAZ,CAAqB;AAACC,YAAAA,IAAI,EAAC,OAAN;AAAcC,YAAAA,OAAO,EAACX;AAAtB,WAArB;AACH;AACJ,OAtBP,EAsBSY,KAtBT,CAsBgBC,KAAD,IAAW;AAChBZ,QAAAA,OAAO,CAACY,KAAR,CAAc,QAAd,EAAwBA,KAAxB;AACH,OAxBP;AAyBP;AACR,GAhCD;;AAkCA,QAAM7B,SAAS,GAAI8B,QAAD,IAAc;AACxB,QAAIpC,MAAM,GAAG,EAAb;;AACA,QAAGoC,QAAQ,CAACrC,KAAT,KAAiBsC,SAApB,EAA8B;AAC5B,UAAGD,QAAQ,CAACrC,KAAT,CAAeU,MAAf,KAAwB,CAA3B,EAA6B;AACvBT,QAAAA,MAAM,CAACD,KAAP,GAAe,2BAAf;AACL;AACF;;AACD,WAAOC,MAAP;AACP,GARD;;AASA,sBACQ,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACQ,oBAAC,GAAD;AAAM,IAAA,EAAE,EAAE,CAAV;AAAa,IAAA,EAAE,EAAE,CAAjB;AAAoB,IAAA,EAAE,EAAE,CAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACA,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADA,eAEA,oBAAC,GAAD;AAAK,IAAA,EAAE,EAAE,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACQ,oBAAC,IAAD;AAAM,IAAA,UAAU,MAAhB;AAAiB,IAAA,QAAQ,EAAEE,YAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACA,oBAAC,IAAD,CAAM,KAAN;AAAY,IAAA,SAAS,EAAC,gBAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACQ,oBAAC,IAAD,CAAM,KAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADR,eAEQ,oBAAC,IAAD,CAAM,OAAN;AAAc,IAAA,IAAI,EAAC,OAAnB;AAA2B,IAAA,IAAI,EAAG,OAAlC;AAA0C,IAAA,WAAW,EAAC,aAAtD;AAAoE,IAAA,QAAQ,EAAGC,KAAD,IAAS;AAE/EL,MAAAA,aAAa,CAAC,EACd,GAAGD,UADW;AAEd,SAACM,KAAK,CAACmC,aAAN,CAAoBC,IAArB,GAA2BpC,KAAK,CAACmC,aAAN,CAAoBE;AAFjC,OAAD,CAAb;AAKP,KAPD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFR,EAWgBxC,MAAM,CAACD,KAAP,iBACA,oBAAC,IAAD,CAAM,IAAN;AAAW,IAAA,KAAK,EAAE;AAAC0C,MAAAA,KAAK,EAAC;AAAP,KAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACSzC,MAAM,CAACD,KADhB,CAZhB,CADA,eAkBA,oBAAC,MAAD;AAAQ,IAAA,OAAO,EAAC,SAAhB;AAA0B,IAAA,IAAI,EAAC,QAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAlBA,CADR,CAFA,eA0BA,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA1BA,CADR,CADR;AAiCP,CAlFD;;AAoFA,eAAeH,GAAf","sourcesContent":["import React, {useState} from 'react';\nimport { Button,Form,Container,Row,Col } from 'react-bootstrap';\nconst App = ()=>{\n        const [ResetEmail,setResetEmail] = useState({\n                email:'',\n            });\n        const [errors,setErrors] = useState({});\n\n        const handleSubmit = (event) => {\n                event.preventDefault();\n                event.stopPropagation();\n                var errors = validator(ResetEmail);\n                setErrors(errors);\n                if(Object.keys(errors).length === 0 ){\n                        fetch(loginUrl, {\n                                method: 'POST', // or 'PUT'\n                                headers: {\n                                    'Content-Type': 'application/json',\n                                },\n                                body: JSON.stringify(formContext.LoginFormInfo),\n                              })\n                              .then(response => response.json())\n                              .then(data => {\n                                console.log(data)\n                                if(data.status==='failed'){\n                                  setErrors({\n                                    info:data.info       \n                                  })\n                                }\n                                  if(data.status==='success'){\n                                      setCookie('token',data.token);\n                                      setCookie('username',data.username);\n                                      setCookie('email',data.email);\n                                      setShow(false);\n                                      formContext.dispatch({type:'login',payload:data})\n                                  }\n                              }).catch((error) => {\n                                  console.error('Error:', error);\n                              });\n                }\n        }\n\n        const validator = (userInfo) => {\n                let errors = {};\n                if(userInfo.email!==undefined){\n                  if(userInfo.email.length===0){\n                        errors.email = 'Email Address Is Required'\n                  }\n                }\n                return errors;\n        }\n        return(\n                <Container>\n                        <Row  xs={2} md={4} lg={6}>\n                        <Col></Col>\n                        <Col lg={4}>\n                                <Form noValidate onSubmit={handleSubmit}>\n                                <Form.Group controlId=\"formBasicEmail\">\n                                        <Form.Label>Email address</Form.Label>\n                                        <Form.Control type=\"email\" name = \"email\" placeholder=\"Enter email\" onChange={(event)=>{\n                                                \n                                                setResetEmail({\n                                                ...ResetEmail,\n                                                [event.currentTarget.name]:event.currentTarget.value\n                                                })\n                                                \n                                        }} />\n                                          {\n                                                errors.email&&\n                                                <Form.Text style={{color:'red'}}>\n                                                        {errors.email}\n                                                </Form.Text>\n                                         } \n                                </Form.Group>\n                                <Button variant=\"primary\" type=\"submit\">\n                                        Submit\n                                </Button>  \n                                </Form>\n                        </Col>\n                        <Col></Col>\n                                \n                        </Row>\n                </Container>\n        )\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}